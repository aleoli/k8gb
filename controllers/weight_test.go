package controllers

/*
Copyright 2022 The k8gb Contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"context"
	"fmt"
	"testing"

	"github.com/k8gb-io/k8gb/controllers/depresolver"
	"sigs.k8s.io/controller-runtime/pkg/client"

	k8gbv1beta1 "github.com/k8gb-io/k8gb/api/v1beta1"

	"github.com/golang/mock/gomock"
	"github.com/k8gb-io/k8gb/controllers/providers/assistant"
	"github.com/k8gb-io/k8gb/controllers/providers/dns"
	"github.com/stretchr/testify/assert"
	externaldns "sigs.k8s.io/external-dns/endpoint"
)

func TestWeight(t *testing.T) {
	// arrange
	type wrr struct {
		weight  string
		targets []string
	}
	var tests = []struct {
		name          string
		data          map[string]wrr
		injectWeights bool
		annotation    string
	}{
		{
			name:          "eu35-us50-za15",
			injectWeights: true,
			data: map[string]wrr{
				"eu": {weight: "35%", targets: []string{"10.10.0.1", "10.10.0.2"}},
				"us": {weight: "50%", targets: []string{"10.0.0.1", "10.0.0.2"}},
				"za": {weight: "15%", targets: []string{"10.22.0.1", "10.22.0.2", "10.22.1.1"}},
			},
			annotation: `{"eu":{"weight":35,"targets":["10.10.0.1","10.10.0.2"]},` +
				`"us":{"weight":50,"targets":["10.0.0.1","10.0.0.2"]},` +
				`"za":{"weight":15,"targets":["10.22.0.1","10.22.0.2","10.22.1.1"]}}`,
		},

		{
			name:          "eu100-us0-za0",
			injectWeights: true,
			data: map[string]wrr{
				"eu": {weight: "100%", targets: []string{"10.10.0.1", "10.10.0.2"}},
				"us": {weight: "0%", targets: []string{"10.0.0.1", "10.0.0.2"}},
				"za": {weight: "0%", targets: []string{"10.22.0.1", "10.22.0.2", "10.22.1.1"}},
			},
			annotation: `{"eu":{"weight":100,"targets":["10.10.0.1","10.10.0.2"]},` +
				`"us":{"weight":0,"targets":["10.0.0.1","10.0.0.2"]},` +
				`"za":{"weight":0,"targets":["10.22.0.1","10.22.0.2","10.22.1.1"]}}`,
		},

		{
			name:          "weights-without-external-targets",
			injectWeights: true,
			data: map[string]wrr{
				"eu": {weight: "25%", targets: []string{}},
				"us": {weight: "75%", targets: []string{}},
				"za": {weight: "0%", targets: []string{}},
			},
			annotation: `{"eu":{"weight":25,"targets":[]},` +
				`"us":{"weight":75,"targets":[]},` +
				`"za":{"weight":0,"targets":[]}}`,
		},

		{
			name:          "no weights without external targets",
			injectWeights: false,
			data:          map[string]wrr{},
		},

		{
			name:          "no weights with external targets",
			injectWeights: false,
			data: map[string]wrr{
				"eu": {weight: "100%", targets: []string{"10.10.0.1", "10.10.0.2"}},
				"us": {weight: "0%", targets: []string{"10.0.0.1", "10.0.0.2"}},
				"za": {weight: "0%", targets: []string{"10.22.0.1", "10.22.0.2", "10.22.1.1"}},
			},
		},

		{
			name:          "us100",
			injectWeights: true,
			data: map[string]wrr{
				"us": {weight: "100%", targets: []string{"10.0.0.1", "10.0.0.2"}},
			},
			annotation: `{"us":{"weight":100,"targets":["10.0.0.1","10.0.0.2"]}}`,
		},

		{
			name:          "Empty weights",
			injectWeights: true,
			data:          map[string]wrr{},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {

			assertAnnotation := func(gslb *k8gbv1beta1.Gslb, ep *externaldns.DNSEndpoint) error {
				assert.NotNil(t, ep)
				assert.NotNil(t, gslb)
				assert.Equal(t, ep.ObjectMeta.Annotations["k8gb.absa.oss/dnstype"], "local")
				str, found := ep.ObjectMeta.Annotations["k8gb.absa.oss/weight-round-robin"]
				// annotation doesnt exist
				assert.Equal(t, len(test.annotation) != 0, found)
				// annotation is equal to tested value
				assert.Equal(t, test.annotation, str)
				return nil
			}

			injectWeight := func(ctx context.Context, gslb *k8gbv1beta1.Gslb, client client.Client) error {
				if !test.injectWeights {
					return nil
				}
				gslb.Spec.Strategy.Weight = make(map[string]k8gbv1beta1.Percentage, 0)
				for k, w := range test.data {
					gslb.Spec.Strategy.Weight[k] = k8gbv1beta1.Percentage(w.weight)
				}
				return nil
			}

			ctrl := gomock.NewController(t)
			defer ctrl.Finish()
			settings := provideSettings(t, predefinedConfig)
			m := dns.NewMockProvider(ctrl)
			r := depresolver.NewMockResolver(ctrl)
			m.EXPECT().GslbIngressExposedIPs(gomock.Any()).Return([]string{}, nil).Times(1)
			m.EXPECT().SaveDNSEndpoint(gomock.Any(), gomock.Any()).Do(assertAnnotation).Return(fmt.Errorf("save DNS error")).Times(1)
			m.EXPECT().CreateZoneDelegationForExternalDNS(gomock.Any()).Return(nil).AnyTimes()
			r.EXPECT().ResolveGslbSpec(gomock.Any(), gomock.Any(), gomock.Any()).DoAndReturn(injectWeight).AnyTimes()

			ts := assistant.Targets{}
			for k, w := range test.data {
				ts[k] = assistant.Target{IPs: w.targets}
			}
			m.EXPECT().GetExternalTargets("roundrobin.cloud.example.com").Return(ts).Times(1)
			m.EXPECT().GetExternalTargets("notfound.cloud.example.com").Return(assistant.Targets{}).Times(1)
			m.EXPECT().GetExternalTargets("unhealthy.cloud.example.com").Return(assistant.Targets{}).Times(1)

			settings.reconciler.DNSProvider = m
			settings.reconciler.DepResolver = r

			// act, assert
			_, _ = settings.reconciler.Reconcile(context.TODO(), settings.request)
		})
	}
}
